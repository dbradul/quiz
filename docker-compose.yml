version: '3'

services:

  backend:
    build: ./
#    image: dbradul/quiz
    container_name: quiz_container
    restart: always
    command: ./commands/start_server_${MODE}.sh
    ports:
      - "${PORT}:${WSGI_PORT}"
    volumes:
      - ./src:/srv/project/src
      - ./commands:/srv/project/commands
      - static_content:/var/www/quiz
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=app.settings.${MODE}
    depends_on:
      - postgres
      - rabbitmq
      - redis

  postgres:
    image: postgres:12
    volumes:
      - pg_data:/var/lib/postgresql/data
#    ports:
#      - "5432:5432"
    env_file:
      - .env

  nginx:
    image: nginx:1.19
    command: /etc/nginx/start_nginx.sh
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./commands/start_nginx.sh:/etc/nginx/start_nginx.sh
      - static_content:/var/www/quiz
    ports:
      - 80:80
      - 443:443
    env_file:
      - .env
    depends_on:
      - backend


  rabbitmq:
    image: rabbitmq:3.8-management-alpine
#    ports:
#      - 8181:15672
    env_file: .env
    restart: always

  redis:
    image: redis
    env_file: .env
    restart: always

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
    - REDIS_HOSTS=redis
#    ports:
#    - "8081:8081"

  celery:
    env_file: .env
    build: .
    command: ./commands/start_celery.sh
    restart: always
    depends_on:
      - redis
      - rabbitmq
    environment:
      - DJANGO_SETTINGS_MODULE=app.settings.${MODE}
    volumes:
      - ./src:/srv/project/src
      - ./commands:/srv/project/commands

  celerybeat:
    env_file: .env
    build: .
    container_name: celerybeat
    command: ./commands/start_celerybeat.sh
    restart: always
    depends_on:
      - redis
      - celery
      - rabbitmq
    environment:
      - DJANGO_SETTINGS_MODULE=app.settings.${MODE}
    volumes:
      - ./src:/srv/project/src
      - ./commands:/srv/project/commands


volumes:
  pg_data: {}
  static_content: {}
